type files =
  | Directory of string * files array
  | File of string * string

let valid_identifier name =
  String.init (String.length name) (fun i ->
    match name.[i] with
      | '-' -> '_'
      | '\\' -> '_'
      | c -> c)

let rootdir = Sys.getcwd ()

let rec is_empty = function
  | Directory (_, children) -> Array.fold_left (fun accu child -> accu && (is_empty child)) true children
  | File _ -> false
  
let search_om_files path =
  Sys.chdir rootdir;
  Sys.chdir path;
  let rec loop path =
    let accu = ref [] in
    Array.iter (fun name ->
      if Sys.is_directory name then (
        Sys.chdir name;
        let dir = Directory (name, loop (path ^ "\\" ^ name)) in
        (if not (is_empty dir) then
          accu :=  dir :: !accu);
        Sys.chdir "..")
      else if 8 <= String.length name && (String.sub name (String.length name - 8) 8) = ".install" then
        let om = (String.sub name 0 (String.length name - 8)) ^ ".om" in
        accu := (File (om, path ^ "\\" ^ name)) :: !accu) (Sys.readdir ".");
    Array.of_list (List.rev !accu) in
  loop path
  
let files = [|
  Directory ("bin", [|
    File ("omake.exe", {|src\main\omake.exe|});
    File ("osh.exe", {|src\main\osh.exe|})|]);
  Directory ("lib", [|
    Directory ("omake", Array.append [|
      File ("OMakefile.default", {|lib\OMakefile.default|});
      File ("OMakeroot.default", {|lib\OMakeroot.default|})|]
      (search_om_files "lib"))|])|]

let print_indent n =
  for _ = 1 to n do
    print_string "  "
  done

let components = ref []

let rec gen indent = Array.iter (function
  | Directory (name, files) ->
      print_indent indent; print_endline (Printf.sprintf {|<Directory Id="%s" Name="%s">|} (valid_identifier name) name);
      gen (indent + 1) files;
      print_indent indent; print_endline (Printf.sprintf {|</Directory>|})
  | File (dst_name, src_path) ->
      let id = valid_identifier src_path in
      assert (not (List.mem id !components));
      components := id :: !components;
      print_indent indent; print_endline (Printf.sprintf {|<Component Id="%s" Guid="*">|} id);
      print_indent indent; print_endline (Printf.sprintf {|  <File Source="%s" Name="%s" Id="%s" KeyPath="yes"/>|} src_path dst_name ("file_" ^ id));
      print_indent indent; print_endline (Printf.sprintf {|</Component>|}))

let _=
  print_endline {|<?xml version="1.0"?>
<!-- THIS FILE IS GENERATED by command 'ocaml wxsgen.ml' -->
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
  <Product Id="*" UpgradeCode="9d04204e-f404-4aeb-a6dc-84cfa09cec84" Name="OMake" Version="0.0.1" Manufacturer="OMake-dev" Language="1033">
    <Package InstallerVersion="200" Compressed="yes" Comments="Windows Installer Package"/>
    <Media Id="1" Cabinet="product.cab" EmbedCab="yes"/>
    <Directory Id="TARGETDIR" Name="SourceDir">
      <Component Id="Path" Guid="9d049b77-f575-4ab8-86e0-b397c7acdf81">
        <Environment Id="PATH" Name="PATH" Value="[OMake]bin" Permanent="no" Part="last" Action="set" System="yes"/>
      </Component>
      <Directory Id="ProgramFilesFolder">
        <Directory Id="OMake" Name="OMake">|};
  gen 5 files;
  print_endline
{|        </Directory>
      </Directory>
    </Directory>
    <Feature Id="DefaultFeature" Level="1">
      <ComponentRef Id="Path"/>|};
  List.iter (fun s -> print_indent 3; print_endline (Printf.sprintf {|<ComponentRef Id="%s"/>|} s)) !components;
  print_endline
{|    </Feature>
  </Product>
</Wix>|}
